# This Dockerfile is generated by 'generate-Dockerfile.sh' from elements within 'src/'

# **Please do not change this file directly!**
# To adapt this Dockerfile, adapt 'generate-Dockerfile.sh' or 'src/Dockerfile.usefulpackages'.
# More information can be found in the README under configuration.


# Use NVIDIA CUDA as base image and run the same installation as in the other packages.
# The version of cudatoolkit must match those of the base image
FROM nvcr.io/nvidia/tensorflow:21.02-tf2-py3
LABEL authors="Eduardo Diniz <edd32@pitt.edu>"

USER root

# This is a concatenated Dockerfile, the maintainers of subsequent sections may vary.
RUN chmod 1777 /tmp && chmod 1777 /var/tmp

ARG NB_USER="jovyan"
ARG NB_PW="jovyan"
ARG NB_UID="1000"
ARG NB_GID="100"

# Option1: Using unencrypted password/ specifying password
RUN useradd -m -s /bin/bash -N -u ${NB_UID} ${NB_USER} && echo "${NB_USER}:${NB_PW}" | \
      chpasswd

# Option2: Using the same encrypted password as host
#COPY /etc/group /etc/group
#COPY /etc/passwd /etc/passwd
#COPY /etc/shadow /etc/shadow

# Switch back to jovyan to avoid accidental container runs as root
USER ${NB_UID}:${NB_GID}
WORKDIR /home/${NB_USER}

############################################################################
#################### Dependency: jupyter/base-image ########################
############################################################################

# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

# Ubuntu 20.04 (focal)
# https://hub.docker.com/_/ubuntu/?tab=tags&name=focal
# OS/ARCH: linux/amd64
ARG ROOT_CONTAINER=ubuntu:focal-20210119@sha256:3093096ee188f8ff4531949b8f6115af4747ec1c58858c091c8cb4579c39cc4e


LABEL maintainer="Jupyter Project <jupyter@googlegroups.com>"
ARG NB_USER="jovyan"
ARG NB_UID="1000"
ARG NB_GID="100"

# Fix DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

USER root

# ---- Miniforge installer ----
# Default values can be overridden at build time
# (ARGS are in lower case to distinguish them from ENV)
# Check https://github.com/conda-forge/miniforge/releases
# Conda version
ARG conda_version="4.9.2"
# Miniforge installer patch version
ARG miniforge_patch_number="7"
# Miniforge installer architecture
ARG miniforge_arch="x86_64"
# Package Manager and Python implementation to use (https://github.com/conda-forge/miniforge)
# - conda only: either Miniforge3 to use Python or Miniforge-pypy3 to use PyPy
# - conda + mamba: either Mambaforge to use Python or Mambaforge-pypy3 to use PyPy
ARG miniforge_python="Mambaforge"

# Miniforge archive to install
ARG miniforge_version="${conda_version}-${miniforge_patch_number}"
# Miniforge installer
ARG miniforge_installer="${miniforge_python}-${miniforge_version}-Linux-${miniforge_arch}.sh"
# Miniforge checksum
ARG miniforge_checksum="5a827a62d98ba2217796a9dc7673380257ed7c161017565fba8ce785fb21a599"

# Install all OS dependencies for notebook server that starts but lacks all
# features (e.g., download as all possible file formats)
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get -q update \
 && apt-get install -yq --no-install-recommends \
    wget \
    ca-certificates \
    sudo \
    locales \
    fonts-liberation \
    run-one \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen

# Configure environment
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8
ENV PATH=$CONDA_DIR/bin:$PATH \
    HOME=/home/$NB_USER \
    CONDA_VERSION="${conda_version}" \
    MINIFORGE_VERSION="${miniforge_version}"

# Copy a script that we will use to correct permissions after running certain commands
COPY fix-permissions /usr/local/bin/fix-permissions
RUN chmod a+rx /usr/local/bin/fix-permissions

# Enable prompt color in the skeleton .bashrc before creating the default NB_USER
# hadolint ignore=SC2016
RUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc && \
   # Add call to conda init script see https://stackoverflow.com/a/58081608/4413446
   echo 'eval "$(command conda shell.bash hook 2> /dev/null)"' >> /etc/skel/.bashrc 

# Create NB_USER with name jovyan user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
RUN echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    mkdir -p $CONDA_DIR && \
    chown $NB_USER:$NB_GID $CONDA_DIR && \
    chmod g+w /etc/passwd && \
    fix-permissions $HOME && \
    fix-permissions $CONDA_DIR

USER $NB_UID
ARG PYTHON_VERSION=default

# Setup work directory for backward-compatibility
RUN mkdir "/home/$NB_USER/work" && \
    fix-permissions "/home/$NB_USER"

# Install conda as jovyan and check the sha256 sum provided on the download site
WORKDIR /tmp

# Prerequisites installation: conda, mamba, pip, tini
RUN wget --quiet "https://github.com/conda-forge/miniforge/releases/download/${miniforge_version}/${miniforge_installer}" && \
    echo "${miniforge_checksum} *${miniforge_installer}" | sha256sum --check && \
    /bin/bash "${miniforge_installer}" -f -b -p $CONDA_DIR && \
    rm "${miniforge_installer}" && \
    # Conda configuration see https://conda.io/projects/conda/en/latest/configuration.html
    echo "conda ${CONDA_VERSION}" >> $CONDA_DIR/conda-meta/pinned && \
    conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \
    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned && \
    conda install --quiet --yes \
    "conda=${CONDA_VERSION}" \
    'pip' \
    'tini=0.18.0' && \
    conda update --all --quiet --yes && \
    conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned && \
    conda clean --all -f -y && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

# Install Jupyter Notebook, Lab, and Hub
# Generate a notebook server config
# Cleanup temporary files
# Correct permissions
# Do all this in a single RUN command to avoid duplicating all of the
# files across image layers when the permissions change
RUN conda install --quiet --yes \
    'notebook=6.2.0' \
    'jupyterhub=1.3.0' \
    'jupyterlab=3.0.9' && \
    conda clean --all -f -y && \
    npm cache clean --force && \
    jupyter notebook --generate-config && \
    jupyter lab clean && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

EXPOSE 8888

# Configure container startup
ENTRYPOINT ["tini", "-g", "--"]
CMD ["start-notebook.sh"]

# Copy local files as late as possible to avoid cache busting
COPY start.sh start-notebook.sh start-singleuser.sh /usr/local/bin/
# Currently need to have both jupyter_notebook_config and jupyter_server_config to support classic and lab
COPY jupyter_notebook_config.py /etc/jupyter/

# Fix permissions on /etc/jupyter as root
USER root

# Prepare upgrade to JupyterLab V3.0 #1205
RUN sed -re "s/c.NotebookApp/c.ServerApp/g" \
    /etc/jupyter/jupyter_notebook_config.py > /etc/jupyter/jupyter_server_config.py

RUN fix-permissions /etc/jupyter/

# Switch back to jovyan to avoid accidental container runs as root
USER $NB_UID

WORKDIR $HOME

############################################################################
################# Dependency: jupyter/minimal-notebook #####################
############################################################################

# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

LABEL maintainer="Jupyter Project <jupyter@googlegroups.com>"

USER root

# Install all OS dependencies for fully functional notebook server
RUN apt-get update && apt-get install -yq --no-install-recommends \
    build-essential \
    vim-tiny \
    git \
    inkscape \
    libsm6 \
    libxext-dev \
    libxrender1 \
    lmodern \
    netcat \
    # ---- nbconvert dependencies ----
    texlive-xetex \
    texlive-fonts-recommended \
    texlive-plain-generic \
    # ----
    tzdata \
    unzip \
    nano-tiny \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Create alternative for nano -> nano-tiny
RUN update-alternatives --install /usr/bin/nano nano /bin/nano-tiny 10

# Switch back to jovyan to avoid accidental container runs as root
USER $NB_UID

############################################################################
################# Dependency: jupyter/scipy-notebook #######################
############################################################################

# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

LABEL maintainer="Jupyter Project <jupyter@googlegroups.com>"

USER root

# ffmpeg for matplotlib anim & dvipng+cm-super for latex labels
RUN apt-get update && \
    apt-get install -y --no-install-recommends ffmpeg dvipng cm-super && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

USER $NB_UID

# Install Python 3 packages
RUN conda install --quiet --yes \
    'beautifulsoup4=4.9.*' \
    'conda-forge::blas=*=openblas' \
    'bokeh=2.2.*' \
    'bottleneck=1.3.*' \
    'cloudpickle=1.6.*' \
    'cython=0.29.*' \
    'dask=2021.2.*' \
    'dill=0.3.*' \
    'h5py=3.1.*' \
    'ipywidgets=7.6.*' \
    'ipympl=0.6.*'\
    'matplotlib-base=3.3.*' \
    'numba=0.52.*' \
    'numexpr=2.7.*' \
    'pandas=1.2.*' \
    'patsy=0.5.*' \
    'protobuf=3.15.*' \
    'pytables=3.6.*' \
    'scikit-image=0.18.*' \
    'scikit-learn=0.24.*' \
    'scipy=1.6.*' \
    'seaborn=0.11.*' \
    'sqlalchemy=1.3.*' \
    'statsmodels=0.12.*' \
    'sympy=1.7.*' \
    'vincent=0.4.*' \
    'widgetsnbextension=3.5.*'\
    'xlrd=2.0.*' && \
    conda clean --all -f -y && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

# Install facets which does not have a pip or conda package at the moment
WORKDIR /tmp
RUN git clone https://github.com/PAIR-code/facets.git && \
    jupyter nbextension install facets/facets-dist/ --sys-prefix && \
    rm -rf /tmp/facets && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

# Import matplotlib the first time to build the font cache.
ENV XDG_CACHE_HOME="/home/${NB_USER}/.cache/"

RUN MPLBACKEND=Agg python -c "import matplotlib.pyplot" && \
    fix-permissions "/home/${NB_USER}"

USER $NB_UID

WORKDIR $HOME

  ############################################################################
  ################# Dependecy: jupyter/datascience-notebook ##################
  ############################################################################
  
# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

LABEL maintainer="Jupyter Project <jupyter@googlegroups.com>"

# Set when building on Travis so that certain long-running build steps can
# be skipped to shorten build time.
ARG TEST_ONLY_BUILD

# Fix DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

USER root

# Julia installation
# Default values can be overridden at build time
# (ARGS are in lower case to distinguish them from ENV)
# Check https://julialang.org/downloads/
ARG julia_version="1.5.3"
# SHA256 checksum
ARG julia_checksum="f190c938dd6fed97021953240523c9db448ec0a6760b574afd4e9924ab5615f1"

# R pre-requisites
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    fonts-dejavu \
    gfortran \
    gcc && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Julia dependencies
# install Julia packages in /opt/julia instead of $HOME
ENV JULIA_DEPOT_PATH=/opt/julia \
    JULIA_PKGDIR=/opt/julia \
    JULIA_VERSION="${julia_version}"

WORKDIR /tmp

# hadolint ignore=SC2046
RUN mkdir "/opt/julia-${JULIA_VERSION}" && \
    wget -q https://julialang-s3.julialang.org/bin/linux/x64/$(echo "${JULIA_VERSION}" | cut -d. -f 1,2)"/julia-${JULIA_VERSION}-linux-x86_64.tar.gz" && \
    echo "${julia_checksum} *julia-${JULIA_VERSION}-linux-x86_64.tar.gz" | sha256sum -c - && \
    tar xzf "julia-${JULIA_VERSION}-linux-x86_64.tar.gz" -C "/opt/julia-${JULIA_VERSION}" --strip-components=1 && \
    rm "/tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz"
RUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia

# Show Julia where conda libraries are \
RUN mkdir /etc/julia && \
    echo "push!(Libdl.DL_LOAD_PATH, \"$CONDA_DIR/lib\")" >> /etc/julia/juliarc.jl && \
    # Create JULIA_PKGDIR \
    mkdir "${JULIA_PKGDIR}" && \
    chown "${NB_USER}" "${JULIA_PKGDIR}" && \
    fix-permissions "${JULIA_PKGDIR}"

USER $NB_UID

# R packages including IRKernel which gets installed globally.
RUN conda install --quiet --yes \
    'r-base=4.0.3'  \
    'r-caret=6.0*' \
    'r-crayon=1.4*' \
    'r-devtools=2.3*' \
    'r-forecast=8.13*' \ 
    'r-hexbin=1.28*' \
    'r-htmltools=0.5*' \
    'r-htmlwidgets=1.5*' \ 
    'r-irkernel=1.1*' \
    'r-nycflights13=1.0*' \
    'r-randomforest=4.6*' \
    'r-rcurl=1.98*' \
    'r-rmarkdown=2.7*' \
    'r-rsqlite=2.2*' \
    'r-shiny=1.6*' \
    'r-tidyverse=1.3*' \
    'rpy2=3.4*' && \
    conda clean --all -f -y && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

# Add Julia packages. Only add HDF5 if this is not a test-only build since
# it takes roughly half the entire build time of all of the images on Travis
# to add this one package and often causes Travis to timeout.
#
# Install IJulia as jovyan and then move the kernelspec out
# to the system share location. Avoids problems with runtime UID change not
# taking effect properly on the .local folder in the jovyan home dir.
RUN julia -e 'import Pkg; Pkg.update()' && \
    (test $TEST_ONLY_BUILD || julia -e 'import Pkg; Pkg.add("HDF5")') && \
    julia -e "using Pkg; pkg\"add IJulia\"; pkg\"precompile\"" && \
    # move kernelspec out of home \
    mv "${HOME}/.local/share/jupyter/kernels/julia"* "${CONDA_DIR}/share/jupyter/kernels/" && \
    chmod -R go+rx "${CONDA_DIR}/share/jupyter" && \
    rm -rf "${HOME}/.local" && \
    fix-permissions "${JULIA_PKGDIR}" "${CONDA_DIR}/share/jupyter"

WORKDIR $HOME

  ############################################################################
  ##################### Dependency: GPULIBS ##################################
  ############################################################################
  
LABEL maintainer="Eduardo Diniz <edd32@pitt.edu>"

USER $NB_USER

# Install PyTorch with dependencies
RUN conda install --quiet --yes \
    pyyaml mkl mkl-include setuptools cmake cffi typing

# Check compatibility here: https://pytorch.org/get-started/locally/
RUN pip install --upgrade pip && \
    pip install --no-cache-dir \
        torch \
        torchvision \
        torchaudio \
        torchviz \
        torchsummary \
        torchelastic

# Install Keras, check compatibility here: https://www.tensorflow.org/install/gpu
#RUN pip install --no-cache-dir keras

# Install NLP libraries:
RUN pip install nltk gensim spacy && \
    python -m spacy download en_core_web_sm

# Install Reinforcement Learning library:
RUN pip install gym

# Install for Object Detection notebook:
RUN pip install opencv-python

# Clean installation
#RUN conda clean --all -f -y && \
#    fix-permissions $CONDA_DIR && \
#    fix-permissions /home/$NB_USER

  ############################################################################
  ############################ Useful packages ###############################
  ############################################################################
  
LABEL authors="Eduardo Diniz <edd32@pitt.edu>"

USER root

RUN pip install --no-cache-dir \
        ipyleaflet \
        ipywidgets \
        jupyterhub \
        ipysheet \
        voila \
 && pip install --no-cache-dir \
        plotly \
        dash \
 && pip install --no-cache-dir \
        bokeh \
        jupyter_bokeh \
 &&	pip install --no-cache-dir \
        jupyterlab_latex \
        dockerspawner \
        oauthenticator \
        cufflinks \
        algorithmx \
 && pip install --no-cache-dir --upgrade jupyterthemes \
 && pip install --no-cache-dir \
    jupyter_contrib_nbextensions \
    jupyter_nbextensions_configurator


RUN jupyter contrib nbextension install --sys-prefix
RUN jupyter nbextensions_configurator enable --sys-prefix

# Enable the Jupyter Lab extensions
RUN pip install --no-cache-dir --upgrade jupyterlab jupyterlab-git \
 && pip install --no-cache-dir \
    jupyterlab-drawio

# Install important packages and Graphviz
RUN set -ex \
 && buildDeps=' \
    graphviz \
' \
 && apt-get update \
 && apt-get install -yq --no-install-recommends \
        htop \
        apt-utils \
        graphviz \
        libgraphviz-dev \
        openssh-client \
        tmux \
 && pip install --no-cache-dir \
        $buildDeps \
        requests \
        arrow \
        dateutils \
        webdavclient \
        webdavclient3

# code formatter
RUN pip install --no-cache-dir \
        black \
        yapf \
        jupyterlab_code_formatter \
 && pip install --no-cache-dir --upgrade autopep8

# dbdime (Jupyter Notebook Diff and Merge tools)
RUN pip install --no-cache-dir nbdime

RUN	apt-get install -yq --no-install-recommends \
		texlive-latex-recommended \
		texlive-lang-english \
		texlive-lang-european \
		texlive-lang-german \
		texlive-pstricks \
		tmux \
		vim \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*


##################################################
####### Enable Jupyter Notebook Extensions #######
##################################################
#RUN jupyter nbextension enable --py --sys-prefix jupyter-black-master/jupyter-black
#RUN jupyter nbextension enable --py --sys-prefix notify
#RUN jupyter nbextension enable --py --sys-prefix skip-traceback
#RUN jupyter nbextension enable --py --sys-prefix jupyter-autopep8-master/jupyter-autopep8
#RUN jupyter nbextension enable --py --sys-prefix scratchpad
#RUN jupyter nbextension enable --py --sys-prefix snippets
#RUN jupyter nbextension enable --py --sys-prefix init_cell
#RUN jupyter nbextension enable --py --sys-prefix hinterland
#RUN jupyter nbextension enable --py --sys-prefix ipyleaflet
#RUN jupyter nbextension enable --py --sys-prefix contrib_nbextensions_help_item
#RUN jupyter nbextension enable --py --sys-prefix autosavetime
#RUN jupyter nbextension enable --py --sys-prefix codefolding
#RUN jupyter nbextension enable --py --sys-prefix code_font_size/code_font_size
#RUN jupyter nbextension enable --py --sys-prefix code_prettify/code_prettify
#RUN jupyter nbextension enable --py --sys-prefix collapsible_headings
#RUN jupyter nbextension enable --py --sys-prefix comment-uncomment
#RUN jupyter nbextension enable --py --sys-prefix equation-numbering
#RUN jupyter nbextension enable --py --sys-prefix execute_time/ExecuteTime
#RUN jupyter nbextension enable --py --sys-prefix gist_it
#RUN jupyter nbextension enable --py --sys-prefix hide_input
#RUN jupyter nbextension enable --py --sys-prefix spellchecker
#RUN jupyter nbextension enable --py --sys-prefix toc2
#RUN jupyter nbextension enable --py --sys-prefix toggle_all_line_numbers
# RUN pip install --no-cache-dir jupyter-tabnine==1.1.0  --user && \
#  jupyter nbextension install --py jupyter_tabnine --user && \
#  jupyter nbextension enable --py jupyter_tabnine --user && \
#  jupyter serverextension enable --py jupyter_tabnine --user

##################################################
######### Enable Jupyter Lab Extensions ##########
##################################################
# font
#RUN jupyter labextension install @deathbeds/jupyterlab-fonts --no-build
#RUN jupyter labextension install @deathbeds/jupyterlab-font-anonymous-pro --no-build
#RUN jupyter labextension install @deathbeds/jupyterlab-font-dejavu-sans-mono --no-build
#RUN jupyter labextension install @deathbeds/jupyterlab-font-fira-code --no-build


# github
## jupyterlab/github Does not support jlab 3.x yet.
#RUN jupyter labextension install @jupyterlab/github --no-build

# google drive
## jupyterlab/google-drive Does not support jlab 3.x yet.
#RUN jupyter labextension install @jupyterlab/google-drive --no-build

# shortcut ui
## jupyterlab/shortcutui Does not support jlab 3.x yet.
#RUN jupyter labextension install @jupyterlab/shortcutui --no-build

# python byte code
## jupyterlab-python-bytecode Does not support jlab 3.x yet.
#RUN jupyter labextension install jupyterlab-python-bytecode --no-build

# file tree
## jupyterlab_filetree Does not support jlab 3.x yet.
#RUN jupyter labextension install jupyterlab_filetree --no-build


# horizon theme
## @mohirio/jupyterlab-horizon-theme Does not support jlab 3.x yet.
#RUN jupyter labextension install @mohirio/jupyterlab-horizon-theme --no-build

# material darker theme
## @oriolmirosa/jupyterlab_materialdarker Does not support jlab 3.x yet.
#RUN jupyter labextension install @oriolmirosa/jupyterlab_materialdarker --no-build

# darcula theme
## @ryantam626/jupyterlab_code_formatter Does not support jlab 3.x yet.
#RUN jupyter labextension install @telamonian/theme-darcula --no-build


# output auto scroll
## @wallneradam/output_auto_scroll Does not support jlab 3.x yet.
#RUN jupyter labextension install @wallneradam/output_auto_scroll --no-build



# latex
## @jupyterlab/latex Does not support jlab 3.x yet.
#RUN jupyter labextension install @jupyterlab/latex --no-build


# bokeh
## @bokeh/jupyter_bokeh Does not support jlab 3.x yet.
#RUN jupyter labextension install @bokeh/jupyter_bokeh --no-build

# pyviz
## @pyviz/jupyterlab_pyviz Does not support jlab 3.x yet.
#RUN jupyter labextension install @pyviz/jupyterlab_pyviz --no-build


# tensorboard
## jupyterlab_tensorboard Does not support jlab 3.x yet.
#RUN jupyter labextension install jupyterlab_tensorboard --no-build

# html
## @mflevine/jupyterlab_html Does not support jlab 2.x yet.
#RUN jupyter labextension install @mflevine/jupyterlab_html --no-build

# sql outdated
# RUN pip install --no-cache-dir jupyterlab-sql

RUN jupyter serverextension enable --py --sys-prefix jupyterlab && \
    jupyter labextension install @jupyterlab/celltags --no-build && \
    jupyter labextension install @axlair/jupyterlab_vim --no-build && \
    jupyter labextension install @krassowski/jupyterlab_go_to_definition --no-build && \
    jupyter labextension install @ryantam626/jupyterlab_code_formatter --no-build  && \
    jupyter serverextension enable --py --sys-prefix jupyterlab_code_formatter && \
    jupyter labextension install @ijmbarr/jupyterlab_spellchecker --no-build && \
    jupyter labextension install jupyterlab-plotly --no-build && \
    jupyter labextension install @jupyter-widgets/jupyterlab-manager plotlywidget --no-build && \
    jupyter labextension install ipysheet --no-build && \
    jupyter labextension install @jupyterlab/git --no-build && \
    jupyter serverextension enable --py --sys-prefix jupyterlab_git && \
    jupyter labextension install @jupyterlab/hub-extension --no-build && \
    jupyter labextension install algorithmx-jupyter --no-build && \
    jupyter labextension install @jupyterlab/toc --no-build && \
    pip install --no-cache-dir elyra && \
    pip install "jupyter-kite>=2.0.2" && \
    jupyter lab build && \
        jupyter lab clean && \
        jlpm cache clean && \
        npm cache clean --force && \
        rm -rf $HOME/.node-gyp && \
        rm -rf $HOME/.local && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

# Install conda develop
RUN conda install --quiet --yes conda-build && \
    conda clean --all -f -y && \
    fix-permissions "${CONDA_DIR}" && \
    fix-permissions "/home/${NB_USER}"

# Add nvidia-tensorflow packages to conda env path
# For now added link to all modules. I have to figure out what takes precedence, the native packages or the pth ones.
RUN conda develop /usr/local/lib/python3.8/dist-packages/

# Switch back to jovyan to avoid accidental container runs as root
USER $NB_UID

# Copy jupyter_notebook_config.json
COPY jupyter_notebook_config.json /etc/jupyter/
